---
- name: Install Runai
  hosts: localhost
  gather_facts: true
  vars_files:
    - runai_vars.yaml
  become: yes

  tasks:
    - name: Create project in Harbor
      ignore_errors: true
      uri:
        url: "https://harbor.runai.local/api/v2.0/projects"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Basic YWRtaW46a2lyc29u"
        body_format: json
        body:
          {
            "project_name": "{{ version }}",
            "public": true
          }
        status_code: 201
        validate_certs: false  # Set to true if your Harbor registry uses a valid SSL certificate

    - name: Add user kirson to the project
      ignore_errors: true
      uri:
        url: "https://harbor.runai.local/v2.0/projects/{{ version }}/members"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Basic YWRtaW46a2lyc29u"
        body_format: json
        body:
          {
            "member_user": {
              "username": "kirson"
            },
            "role_id": 1  # This is typically the role_id for Project Admin, adjust as needed
          }
        status_code: 201
        validate_certs: false  # Set to true if your Harbor

    - name: Download run.ai version
      get_url:
        url: "https://storage.googleapis.com/airgapped-images/runai-air-gapped-{{ version }}.tar.gz"
        dest: "/tmp/runai-air-gapped-{{ version }}.tar.gz"
        validate_certs: yes

    - name: Create a directory
      ignore_errors: true
      file:
        path: /tmp/{{ version }} 
        state: directory
        mode: '0755'
          
    - name: Extract the tar.gz file
      unarchive:
        src: "/tmp/runai-air-gapped-{{ version }}.tar.gz"
        dest: "/tmp/{{ version }}"
        remote_src: yes

    - name: Try to login to the Docker registry
      docker_login:
        registry: "{{ registry_address }}"
        username: "{{ username }}"
        password: "{{ password }}"

    - name: Set the REGISTRY_URL environment variable
      set_fact:
        registry_url: "{{ registry_address }}/{{ version }}"

    - name: Upload the images
      shell: ./prepare_installation.sh
      args:
       chdir: /tmp/deploy/{{ version }}
      environment:
        REGISTRY_URL: "{{ registry_url }}"
      become: yes

    - name: Display completion message
      debug:
        msg: "Installation completed."

